#include<windows.h>
#include<gl/glut.h>

void init(void);
void tampil(void);
void mouse(int button, int state, int x, int y);
void mouseMotion(int x, int y);
void keyboard(unsigned char, int, int);
void ukuran(int, int);

int is_depth;

int main(int argc, char** argv)
{
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB);
    glutInitWindowSize(800, 600);
    glutInitWindowPosition(100, 80);
    glutCreateWindow("BRISTOL UNIVERSITY");
    init();
    glutDisplayFunc(tampil);
    glutKeyboardFunc(keyboard);
    glutMouseFunc(mouse);
    glutMotionFunc(mouseMotion);
    glutReshapeFunc(ukuran);
    glutMainLoop();
    return 0;
}
void init(void)
{
    glClearColor(0.5, 0.5, 0.5, 0.5);
    glEnable(GL_DEPTH_TEST);
    is_depth = 1;
    glMatrixMode(GL_MODELVIEW);
}

void tampil(void)
{
    if(is_depth)
        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    else
        glClear(GL_COLOR_BUFFER_BIT);
    glPushMatrix();
    glScalef(2.0, 2.0, 2.0);

    //jendela g1
    glBegin(GL_QUADS);
    glColor3f(0.1, 0.1, 0.1);
    glVertex3f(-26.5, -14, 7); glVertex3f(-24.8, -14, 7); glVertex3f(-24.8, -11, 7); glVertex3f(-26.5, -11, 7);
    glVertex3f(-26.5, -9, 7); glVertex3f(-24.8, -9, 7); glVertex3f(-24.8, -6, 7); glVertex3f(-26.5, -6, 7);
    glVertex3f(-26.5, -4, 7); glVertex3f(-24.8, -4, 7); glVertex3f(-24.8, -1, 7); glVertex3f(-26.5, -1, 7);
    glVertex3f(-26.5, 1, 7); glVertex3f(-24.8, 1, 7); glVertex3f(-24.8, 4, 7); glVertex3f(-26.5, 4, 7);
    glVertex3f(-26.5, 6, 7); glVertex3f(-24.8, 6, 7); glVertex3f(-24.8, 9, 7); glVertex3f(-26.5, 9, 7);

    glVertex3f(-23.9, -14, 7); glVertex3f(-22.1, -14, 7); glVertex3f(-22.1, -11, 7); glVertex3f(-23.9, -11, 7);
    glVertex3f(-23.9, -9, 7); glVertex3f(-22.1, -9, 7); glVertex3f(-22.1, -6, 7); glVertex3f(-23.9, -6, 7);
    glVertex3f(-23.9, -4, 7); glVertex3f(-22.1, -4, 7); glVertex3f(-22.1, -1, 7); glVertex3f(-23.9, -1, 7);
    glVertex3f(-23.9, 1, 7); glVertex3f(-22.1, 1, 7); glVertex3f(-22.1, 4, 7); glVertex3f(-23.9, 4, 7);
    glVertex3f(-23.9, 6, 7); glVertex3f(-22.1, 6, 7); glVertex3f(-22.1, 9, 7); glVertex3f(-23.9, 9, 7);

    glVertex3f(-21.2, -14, 7); glVertex3f(-19.5, -14, 7); glVertex3f(-19.5, -11, 7); glVertex3f(-21.2, -11, 7);
    glVertex3f(-21.2, -9, 7); glVertex3f(-19.5, -9, 7); glVertex3f(-19.5, -6, 7); glVertex3f(-21.2, -6, 7);
    glVertex3f(-21.2, -4, 7); glVertex3f(-19.5, -4, 7); glVertex3f(-19.5, -1, 7); glVertex3f(-21.2, -1, 7);
    glVertex3f(-21.2, 1, 7); glVertex3f(-19.5, 1, 7); glVertex3f(-19.5, 4, 7); glVertex3f(-21.2, 4, 7);
    glVertex3f(-21.2, 6, 7); glVertex3f(-19.5, 6, 7); glVertex3f(-19.5, 9, 7); glVertex3f(-21.2, 9, 7);
    glEnd();

    //jendela g2
    glBegin(GL_QUADS);
    glColor3f(0.1, 0.1, 0.1);
    glVertex3f(-14, -14, 7); glVertex3f(-11, -14, 7); glVertex3f(-11, -6, 7); glVertex3f(-14, -6, 7);
    glVertex3f(-9.5, -14, 7); glVertex3f(-6.5, -14, 7); glVertex3f(-6.5, -6, 7); glVertex3f(-9.5, -6, 7);
    glEnd();

    //lantai g1
    glBegin(GL_QUADS);
    glColor3f(0.0, 0.0, 0.0);
    glVertex3f(-30, -15, 7); glVertex3f(-30, -15, -7); glVertex3f(-16, -15, -7); glVertex3f(-16, -15, 7);
    //lantai g2
    glColor3f(0.1, 0.1, 0.1);
    glVertex3f(-15, -15, 7); glVertex3f(-15, -15, -7); glVertex3f(31, -15, -7); glVertex3f(31, -15, 7);
    //bawah m
    glColor3f(0.2, 0.2, 0.2);
    glVertex3f(-31, -15, 8); glVertex3f(-31, -15, 4); glVertex3f(-27, -15, 4); glVertex3f(-27, -15, 8);
    glVertex3f(-31, -15, -4); glVertex3f(-31, -15, -8); glVertex3f(-27, -15, -8); glVertex3f(-27, -15, -4);
    glVertex3f(-15, -15, -4); glVertex3f(-15, -15, -8); glVertex3f(-19, -15, -8); glVertex3f(-19, -15, -4);
    glVertex3f(-15, -15, 8); glVertex3f(-15, -15, 4); glVertex3f(-19, -15, 4); glVertex3f(-19, -15, 8);
    glEnd();

    //menara 1a
    glBegin(GL_QUADS);
    glColor3f(0.9, 0.8, 0.4);
    glVertex3f(-31, -15, 8); glVertex3f(-27, -15, 8); glVertex3f(-27, 3, 8); glVertex3f(-31, 3, 8);
    glVertex3f(-31, -15, 8); glVertex3f(-31, -15, 4); glVertex3f(-31, 3, 4); glVertex3f(-31, 3, 8);
    glVertex3f(-31, -15, 4); glVertex3f(-27, -15, 4); glVertex3f(-27, 3, 4); glVertex3f(-31, 3, 4);
    glVertex3f(-27, -15, 8); glVertex3f(-27, -15, 4); glVertex3f(-27, 3, 4); glVertex3f(-27, 3, 8);
    glEnd();
    //menara 1b
    glLineWidth(5);
    glBegin(GL_LINE_LOOP);
    glColor3f(0.0, 0.0, 0.0);
    glVertex3f(-30, 14, 8); glVertex3f(-28, 14, 8); glVertex3f(-27, 14, 7); glVertex3f(-27, 14, 5);
    glVertex3f(-28, 14, 4); glVertex3f(-30, 14, 4); glVertex3f(-31, 14, 5); glVertex3f(-31, 14, 7);
    glEnd();
    glBegin(GL_QUADS);
    glColor3f(0.9, 0.8, 0.6);
    glVertex3f(-30, 3, 8); glVertex3f(-28, 3, 8); glVertex3f(-28, 15, 8); glVertex3f(-30, 15, 8);
    glVertex3f(-28, 3, 8); glVertex3f(-27, 3, 7); glVertex3f(-27, 15, 7); glVertex3f(-28, 15, 8);
    glVertex3f(-27, 3, 7); glVertex3f(-27, 3, 5); glVertex3f(-27, 15, 5); glVertex3f(-27, 15, 7);
    glVertex3f(-27, 3, 5); glVertex3f(-28, 3, 4); glVertex3f(-28, 15, 4); glVertex3f(-27, 15, 5);
    glVertex3f(-28, 3, 4); glVertex3f(-30, 3, 4); glVertex3f(-30, 15, 4); glVertex3f(-28, 15, 4);
    glVertex3f(-30, 3, 4); glVertex3f(-31, 3, 5); glVertex3f(-31, 15, 5); glVertex3f(-30, 15, 4);
    glVertex3f(-31, 3, 5); glVertex3f(-31, 3, 7); glVertex3f(-31, 15, 7); glVertex3f(-31, 15, 5);
    glVertex3f(-31, 3, 7); glVertex3f(-30, 3, 8); glVertex3f(-30, 15, 8); glVertex3f(-31, 15, 7);
    glEnd();
    glBegin(GL_TRIANGLES);
    glColor3f(0.9, 0.9, 0.4);
    //1
    glVertex3f(-31, 3, 8); glVertex3f(-30, 3, 8); glVertex3f(-30.5, 6, 7.5);
    glVertex3f(-31, 3, 8); glVertex3f(-31, 3, 7); glVertex3f(-30.5, 6, 7.5);
    glVertex3f(-31, 3, 7); glVertex3f(-30, 3, 7); glVertex3f(-30.5, 6, 7.5);
    glVertex3f(-30, 3, 7); glVertex3f(-30, 3, 8); glVertex3f(-30.5, 6, 7.5);
    //2
    glVertex3f(-28, 3, 8); glVertex3f(-27, 3, 8); glVertex3f(-27.5, 6, 7.5);
    glVertex3f(-28, 3, 8); glVertex3f(-28, 3, 7); glVertex3f(-27.5, 6, 7.5);
    glVertex3f(-28, 3, 7); glVertex3f(-27, 3, 7); glVertex3f(-27.5, 6, 7.5);
    glVertex3f(-27, 3, 7); glVertex3f(-27, 3, 8); glVertex3f(-27.5, 6, 7.5);
    //3
    glVertex3f(-31, 3, 5); glVertex3f(-30, 3, 5); glVertex3f(-30.5, 6, 4.5);
    glVertex3f(-31, 3, 5); glVertex3f(-31, 3, 4); glVertex3f(-30.5, 6, 4.5);
    glVertex3f(-31, 3, 4); glVertex3f(-30, 3, 4); glVertex3f(-30.5, 6, 4.5);
    glVertex3f(-30, 3, 4); glVertex3f(-30, 3, 5); glVertex3f(-30.5, 6, 4.5);
    glEnd();

    //tembok g1
    glBegin(GL_QUADS);
    glColor3f(0.9, 0.8, 0.5);
    glVertex3f(-27, -15, 7); glVertex3f(-19, -15, 7); glVertex3f(-19, 10, 7); glVertex3f(-27, 10, 7);
    glVertex3f(-30, -15, 4); glVertex3f(-30, -15, -4); glVertex3f(-30, 10, -4); glVertex3f(-30, 10, 4);
    glVertex3f(-27, -15, -7); glVertex3f(-19, -15, -7); glVertex3f(-19, 10, -7); glVertex3f(-27, 10, -7);
    glVertex3f(-16, -15, 4); glVertex3f(-16, -15, -4); glVertex3f(-16, 10, -4); glVertex3f(-16, 10, 4);
    //tembok g2
    glColor3f(0.9, 0.8, 0.6);
    glVertex3f(-15, -15, 7); glVertex3f(31, -15, 7); glVertex3f(31, 0, 7); glVertex3f(-15, 0, 7);
    glVertex3f(-15, -15, 7); glVertex3f(-15, -15, -7); glVertex3f(-15, 0, -7); glVertex3f(-15, 0, 7);
    glVertex3f(-15, -15, -7); glVertex3f(31, -15, -7); glVertex3f(31, 0, -7); glVertex3f(-15, 0, -7);
    glVertex3f(31, -15, 7); glVertex3f(31, -15, -7); glVertex3f(31, 0, -7); glVertex3f(31, 0, 7);
    glEnd();

    glPopMatrix();
    glutSwapBuffers();
}

void keyboard(unsigned char key, int x, int y)
{
    switch (key)
    {
    case 'w':
    case 'W':
        glTranslatef(0.0, 0.0, 3.0);
        break;
    case 'd':
    case 'D':
        glTranslatef(3.0, 0.0, 0.0);
        break;
    case 's':
    case 'S':
        glTranslatef(0.0, 0.0, -3.0);
        break;
    case 'a':
    case 'A':
        glTranslatef(-3.0, 0.0, 0.0);
        break;
    case '7':
        glTranslatef(0.0, 3.0, 0.0);
        break;
    case '9':
        glTranslatef(0.0, -3.0, 0.0);
        break;
    case '2':
        glRotatef(2.0, 1.0, 0.0, 0.0);
        break;
    case '8':
        glRotatef(-2.0, 1.0, 0.0, 0.0);
        break;
    case '6':
        glRotatef(2.0, 0.0, 1.0, 0.0);
        break;
    case '4':
        glRotatef(-2.0, 0.0, 1.0, 0.0);
        break;
    case '1':
        glRotatef(2.0, 0.0, 0.0, 1.0);
        break;
    case '3':
        glRotatef(-2.0, 0.0, 0.0, 1.0);
        break;
    case '5':
        if (is_depth)
        {
            is_depth = 0;
            glDisable(GL_DEPTH_TEST);
        }
        else
        {
            is_depth = 1;
            glEnable(GL_DEPTH_TEST);
        }
    }
    tampil();
}
float xrot = 0.0f;
float yrot = 0.0f;
float xdiff = 0.0f;
float ydiff = 0.0f;
bool mouseDown = false;

void identity()
{
    glLoadIdentity();
    gluLookAt(0.0f, 0.0f, 3.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f);
    glRotatef(xrot, 1.0f, 0.0f, 0.0f);
    glRotatef(yrot, 0.0f, 1.0f, 0.0f);
}

void idle()
{
    if (!mouseDown)
    {
        xrot += 0.3f;
        yrot += 0.4f;
    }
    glutPostRedisplay();
}

void mouse(int button, int state, int x, int y)
{

    if (button == GLUT_LEFT_BUTTON && state == GLUT_DOWN)
    {
        mouseDown = true;
        xdiff = x - yrot;
        ydiff = -y + xrot;
    }
    else
        mouseDown = false;
}

void mouseMotion(int x, int y)
{
    identity();
    if (mouseDown)
    {
        yrot = x - xdiff;
        xrot = y + ydiff;
        glutPostRedisplay();
    }

}
void ukuran(int lebar, int tinggi)
{
    if (tinggi == 0)
        tinggi = 1;
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluPerspective(50.0, lebar / tinggi, 5.0, 500.0);
    glTranslatef(0.0, -5.0, -150.0);
    glMatrixMode(GL_MODELVIEW);
}
